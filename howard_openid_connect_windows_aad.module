<?php

/**
 * @file
 * OpenID Connect Windows AAD module file.
 */

use Drupal\user\Entity\Role;
use Drupal\user\UserInterface;
use Drupal\user\RoleInterface;
use Drupal\Core\Form\FormState;
use Drupal\user\Entity\User;

/**
 * Implements hook_admin_settings_alter().
 */
function howard_openid_connect_windows_aad_form_openid_connect_admin_settings_alter(&$form, FormState $form_state, $form_id) {
  array_unshift($form['#submit'], '_howard_openid_connect_windows_aad_form_submit_refresh_routes');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function _howard_openid_connect_windows_aad_form_submit_refresh_routes(&$form, FormState $form_state) {
  $assume_disabled = FALSE;
  try {
    $configuration = \Drupal::config('openid_connect.settings.windows_aad');
    $settings = $configuration->get('settings');
    $aad_enabled = (bool) $configuration->get('enabled');
    $sso_enabled = (isset($settings['enable_single_sign_out']) && $settings['enable_single_sign_out']);
  }
  catch (Exception $exception) {
    // Not likely to happen but assume windows_aad is not enabled if it does.
    $assume_disabled = TRUE;
  }

  // Get clients' enabled status.
  $aad_checked = (bool) $form_state->getValue(array('clients_enabled', 'windows_aad'));
  $sso_checked = (bool) $form_state->getValue(array('clients', 'windows_aad', 'settings', 'enable_single_sign_out'));

  // Rebuild routes since we may override the user.logout route for single
  // sign off.
  if ((!$assume_disabled && ($aad_enabled !== $aad_checked || $sso_enabled !== $sso_checked)) || ($assume_disabled && ((isset($aad_enabled) && $aad_enabled !== $aad_checked) || $aad_checked))) {
    \Drupal::logger('howard_openid_connect_windows_aad')->debug('rebuild routes');
    \Drupal::service('router.builder')->setRebuildNeeded();
  }
}

/**
 * Implements hook_openid_connect_userinfo_save().
 */
function howard_openid_connect_windows_aad_openid_connect_userinfo_save(UserInterface $account, array $context) {

  if ($context['plugin_id'] !== 'windows_aad' || (!isset($context['user_data']['groups']) && !isset($context['userinfo']['groups']['value']))) {
    return;
  }

  try {
    // Ensure windows_aad auth is enabled and configured for group mapping.
    $configuration = \Drupal::config('openid_connect.settings.windows_aad');
    $settings = $configuration->get('settings');
    $aad_enabled = (bool) $configuration->get('enabled');
    if (!$aad_enabled || !$settings['map_ad_groups_to_roles']) {
      return;
    }
  }
  catch (Exception $exception) {
    // Not likely to happen but assume windows_aad is not enabled if it does.
    return;
  }

  // Check to see if we have changed email data, O365_connect doesn't
  // give us the possibility to add a mapping for it, so we do the change now.
  if ($account && ($account->getEmail() != $context['user_data']['email'])) {
    \Drupal::logger('howard_feeds')->notice('email not same');
    $account->setEmail($context['user_data']['email']);
  }

  $mapped_roles = $groups = [];

  $user_roles = $account->getRoles(true);
  $all_roles = Role::loadMultiple();
  unset($all_roles[RoleInterface::ANONYMOUS_ID]);
  unset($all_roles[RoleInterface::AUTHENTICATED_ID]);

  // Retrieve a list of previously mapped roles.
  $UserData = \Drupal::service('user.data');
  $previous_mapped_roles = $UserData->get('howard_openid_connect_windows_aad', $account->id(), 'mapped_roles');
  if (!isset($previous_mapped_roles)) {
    $previous_mapped_roles = array();
  }

  // Groups found in the user_data returned from the auth request.
  if (isset($context['user_data']['groups'])) {
    foreach ($context['user_data']['groups'] as $gid) {
      $groups[$gid] = $gid;
    }
  }

  $group_id_key = 'id';
  // Groups found in the userinfo returned from the user info request.
  if (isset($context['userinfo']['groups']['value'])) {
    foreach ($context['userinfo']['groups']['value'] as $group) {
      $groups[$group['displayName']] = $group['displayName'];
      if (!isset($groups[$group[$group_id_key]])) {
        $groups[$group[$group_id_key]] = $group[$group_id_key];
      }
    }
  }

  if (!empty($settings['group_mapping']['mappings'])) {
    $role_group_map = [];

    // The mappings is a text area with each line containing the following
    // format: <role id or label>|<AD Group ID or Label>;<AD Group ID or Label>; ...
    // Thus we need to split the text out into its components and determine
    // if there are any roles that should map to this user.
    $list = explode("\n", $settings['group_mapping']['mappings']);
    $list = array_map('trim', $list);
    $list = array_filter($list, 'strlen');

    foreach ($list as $position => $text) {
      $matches = [];
      if (preg_match('/(.*)\|(.*)/', $text, $matches)) {
        // Trim key and value to avoid unwanted spaces issues.
        $key = trim($matches[1]);
        if (!$key) {
          continue;
        }
        // Ensure we are dealing with the Role's id and not label.
        if (!isset($all_roles[$key])) {
          foreach ($all_roles as $role) {
            if ($key === $role->label()) {
              $key = $role->id();
            }
          }
        }
        if (!isset($all_roles[$key])) {
          continue;
        }
        // Ensure we end up with a non-empty array of AD groups.
        $value = trim($matches[2]);
        $values = explode(';', $value);
        $values = array_map('trim', $values);
        if (!$values) {
          continue;
        }
        // If any of the mappings match the user's groups then the user
        // should be granted the mapped role. We also unblock the account.
        if (array_intersect($values, $groups)) {

          // Assign Mapped role.
          $mapped_roles[$key] = $key;

          // Automatically unblock ther account, since we know they are the correct person/role desired.
          if($account->isBlocked()) {
            $account->activate();
            \Drupal::messenger()->addMessage('Your account was automatically unblocked, or activated because you belong to the administrators group in Howard Universities Azure SSO system. You are now an active administrator on this site, no further action needed.');
            \Drupal::logger('howard_aad_userinfo_retrieved_from_api')->notice('User account automatically unblocked because it matches roles provided.');
          }

        }
      }
    }
  }

  if ($mapped_roles) {
    $mapped_roles = array_keys($mapped_roles);
  }

  // Determine which mapped roles the user does not already have
  $add = array_diff($mapped_roles, $user_roles);

  // Only remove roles previously mapped, but no longer are.
  $remove = array_diff($previous_mapped_roles, $mapped_roles);

  // Remove Drupal roles the user is no longer permitted to have.
  foreach ($remove as $rid) {
    if (isset($all_roles[$rid])) {
      $role = $all_roles[$rid];
      $account->removeRole($rid);
      $vars = [
        '@role' => $role->label(),
        '@user' => $account->id(),
      ];
      \Drupal::logger('howard_openid_connect_windows_aad')
        ->notice('Removed role @role from user @user', $vars);
    }
  }

  // Add Drupal roles that the user should be granted.
  foreach ($add as $rid) {
    $account->addRole($rid);
    $role = $all_roles[$rid];
    $vars = [
      '@role' => $role->label(),
      '@user' => $account->id(),
    ];
    \Drupal::logger('howard_openid_connect_windows_aad')
      ->notice('Added role @role to user @user', $vars);
  }

  // Save which roles were mapped so we can properly handle removing mapped
  // roles that change the next time.
  $UserData->set('howard_openid_connect_windows_aad', $account->id(), 'mapped_roles', $mapped_roles);
}


/**
 * Implements hook_form_alter().
 *
 * Alters the user register form to remove passwords/etc, since we use openid.
 *
 */
function howard_openid_connect_windows_aad_form_alter(&$form, &$form_state, $form_id) {
  
  // Load current user in order to define some permissions based on role.
  $user = User::load(\Drupal::currentUser()->id());
  $roles = $user->getRoles();

  // User login form. Adjust login text/etc for local admins (non sso).
  if ($form_id == 'user_login_form' ) {
    $form['name']['#description'] = t('');
    $form['pass']['#description'] = t('');
    $form['actions']['submit']['#value'] = t('Log In as Administrator');
    $form['actions']['submit']['#attributes']['class'][] = 'btn';
    $form['actions']['submit']['#attributes']['class'][] = 'btn--light';
  }

  // User Password reset form.
  if ($form_id == 'user_pass' ) {
    $form['actions']['submit']['#value'] = t('Reset Password');
    $form['actions']['submit']['#attributes']['class'][] = 'btn';
    $form['actions']['submit']['#attributes']['class'][] = 'btn--light';
  }

  // User edit form.
  if($form_id == 'user_form') {
    // Hide several form fields on user edit.
    $form['path']['#access'] = FALSE;
    $form['user_picture']['#access'] = FALSE;

    if($user->hasRole('administrator')) {
      // Disable local password field being required for admins. This allows admins to skip, as SSO is desired.
      $form['account']['pass']['#required'] = 0;
      $form['account']['pass']['#description'] = t('<strong>IMPORTANT</strong>: If you are setting local passwords for users, please utilize a strong generated password, such as one form <a href="https://www.strongpasswordgenerator.org/" target="_blank">strongpasswordgenerator.org</a>.');
    } else {
      $form['field_password_expiration']['#access'] = FALSE;
      $form['field_last_password_reset']['#access'] = FALSE;
      $form['account']['current_pass']['#access'] = FALSE;
      $form['account']['current_pass']['#required'] = 0;
      $form['account']['pass']['#access'] = FALSE;
      $form['account']['mail']['#access'] = FALSE;
      $form['account']['name']['#access'] = FALSE;
      $form['account']['status']['#access'] = FALSE;
      $form['account']['roles']['#access'] = FALSE;
      $form['account']['notify']['#access'] = FALSE;
    }
  }

  // User registration form.
  if($form_id == 'user_register_form') {
    // Hide several standard items we dont wish to use.
    $form['path']['#access'] = FALSE;
    $form['user_picture']['#access'] = FALSE;
    $form['timezone']['#access'] = FALSE;

    if($user->hasRole('administrator')) {
      // Disable local password field being required for admins. This allows admins to skip, as SSO is desired.
      $form['account']['pass']['#required'] = 0;
    } else {
      // Unset access to the register form for anyone but admins.
      \Drupal::messenger()->addMessage('Sorry, you cannot create a local drupal account. You must create an account using Howard University Azure SSO, or have an administrator of this site create an account for you.', 'warning');
      $form['field_password_expiration']['#access'] = FALSE;
      $form['field_last_password_reset']['#access'] = FALSE;
      $form['account']['current_pass']['#access'] = FALSE;
      $form['account']['current_pass']['#required'] = 0;
      $form['account']['pass']['#access'] = FALSE;
      $form['account']['mail']['#access'] = FALSE;
      $form['account']['name']['#access'] = FALSE;
      $form['account']['status']['#access'] = FALSE;
      $form['account']['roles']['#access'] = FALSE;
      $form['account']['notify']['#access'] = FALSE;
      $form['actions']['#access'] = FALSE;
    }
  }

}
